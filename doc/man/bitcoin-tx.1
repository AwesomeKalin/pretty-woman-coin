.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.48.1.
.TH BITCOIN-TX "1" "June 2023" "prettywomancoin-tx v1.0.15.1" "User Commands"
.SH NAME
prettywomancoin-tx \- manual page for prettywomancoin-tx v1.0.15.1
.SH DESCRIPTION
Pretty Woman Coin prettywomancoin\-tx utility version v1.0.15.1\-dev
.SS "Usage:"
.TP
prettywomancoin\-tx [options] <hex\-tx> [commands]
Update hex\-encoded prettywomancoin transaction
.TP
prettywomancoin\-tx [options] \fB\-create\fR [commands]
Create hex\-encoded prettywomancoin transaction
.SH OPTIONS
.HP
\-?
.IP
This help message
.HP
\fB\-create\fR
.IP
Create new, empty TX.
.HP
\fB\-json\fR
.IP
Select JSON output
.HP
\fB\-txid\fR
.IP
Output only the hex\-encoded transaction id of the resultant transaction.
.PP
Chain selection options:
.HP
\fB\-testnet\fR
.IP
Use the test chain
.HP
\fB\-regtest\fR
.IP
Enter regression test mode, which uses a special chain in which blocks
can be solved instantly. This is intended for regression testing
tools and app development.
.HP
\fB\-stn\fR
.IP
Use the Scaling Test Network
.PP
Commands:
.IP
delin=N
.IP
Delete input N from TX
.IP
delout=N
.IP
Delete output N from TX
.IP
in=TXID:VOUT(:SEQUENCE_NUMBER)
.IP
Add input to TX
.IP
locktime=N
.IP
Set TX lock time to N
.IP
nversion=N
.IP
Set TX version to N
.IP
outaddr=VALUE:ADDRESS
.IP
Add address\-based output to TX
.IP
outpubkey=VALUE:PUBKEY[:FLAGS]
.IP
Add pay\-to\-pubkey output to TX
.IP
outdata=[VALUE:]DATA
.IP
Add data\-based output to TX
.IP
outscript=VALUE:SCRIPT[:FLAGS]
.IP
Add raw script output to TX
.IP
outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]
.IP
Add Pay To n\-of\-m Multi\-sig output to TX. n = REQUIRED, m = PUBKEYS
.IP
sign=SIGHASH\-FLAGS
.IP
Add zero or more signatures to transaction. This command requires JSON
registers:prevtxs=JSON object, privatekeys=JSON object. See
signrawtransaction docs for format of sighash flags, JSON
objects.
.PP
Register Commands:
.IP
load=NAME:FILENAME
.IP
Load JSON file FILENAME into register NAME
.IP
set=NAME:JSON\-STRING
.IP
Set register NAME to given JSON\-STRING
.SH COPYRIGHT
Copyright (C) 2009-2023 The Prettywomancoin Association

Please contribute if you find Pretty Woman Coin useful. Visit <https://prettywomancoin.io>
for further information about the software.
The source code is available from <https://github.com/prettywomancoin-sv/prettywomancoin-sv>.

This is experimental software.
Distributed under the Open PWC software license, see the accompanying file
LICENSE

This product includes software developed by the OpenSSL Project for use in the
OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by
Eric Young and UPnP software written by Thomas Bernard.
